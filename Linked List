#include <iostream>
using namespace std;
struct Node
{
	int coef;
	int exp;
	struct Node* next;
}*head=NULL,*another=NULL;
void create()
{
	cout << "Enter the number of elements: " << endl;
	int n;
	cin >> n;
	struct Node* t, * last=NULL;
	cout << "Enter the coefficiens and exponents of x for each node" << endl;
	for (int i = 0; i < n; i++)
	{
		t = new struct Node;
		cin >> t->coef >> t->exp;
		t->next = NULL;
		if (head == NULL)
		{
			head = last=t;
		}
		else
		{
			last->next = t;
			last = t;
		}
	}
}
void create1()
{
	cout << "Enter the number of elements in second array: " << endl;
	int n;
	cin >> n;
	struct Node* t, * last = NULL;
	cout << "Enter the coefficiens and exponents of x for each node" << endl;
	for (int i = 0; i < n; i++)
	{
		t = new struct Node;
		cin >> t->coef >> t->exp;
		t->next = NULL;
		if (another == NULL)
		{
			another = last = t;
		}
		else
		{
			last->next = t;
			last = t;
		}
	}
}
long eval(struct Node* p,int x)
{
	long val = 0.0;
	while (p)
	{
		val += p->coef * pow(x, p->exp);
		p = p->next;
	}
	return val;
}
void display(struct Node* p) {
	while (p)
	{
		cout << p->coef << "x^" << p->exp << "+";
		p = p->next;
	}
}
struct Node* Add(struct Node* p, struct Node* q)
{
	struct Node* ans = NULL;
	struct Node* result=NULL;
	if (p->exp < q->exp)
	{
		result = q;
		q = q->next;
	}
	else if (p->exp > q->exp)
	{
		result = p;
		p = p->next;
	}
	else
	{
		result = p;
		result->coef = p->coef + q->coef;
		p = p->next;
		q = q->next;
	}
	ans = result;
	while (p && q)
	{
		if (p->exp < q->exp)
		{
			result->next = q;
			result = q;
			q = q->next;
		}
		else if (p->exp > q->exp)
		{
			result->next = p;
			result = p;
			p = p->next;
		}
		else
		{
			result->next = p;
			result = p;
			result->coef = p->coef + q->coef;
			p = p->next;
			q = q->next;
		}

	}
	while (p)
	{
		result->next = p;
		result = p;
		p = p->next;
	}
	while (q)
	{
		result->next = q;
		result = q;
		q= q->next;
	}
	result->next = NULL;
	return ans;
}
int main()
{
	create();
	create1();
	//cout << eval(head, 1)<<endl;
	struct Node* result;
	result = Add(head, another);
	display(result);
}
